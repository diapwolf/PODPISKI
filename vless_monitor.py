#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ vless –∫–ª—é—á–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª—é—á–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import os
import json
import subprocess
import time
import re
from pathlib import Path
from typing import Dict, List, Set, Optional
from urllib.parse import urlparse, parse_qs

class VlessMonitor:
    def __init__(self, repo_path: str, config_path: str):
        self.repo_path = Path(repo_path)
        self.config_path = Path(config_path)
        self.last_commit = None
        self.active_keys = set()
        
    def get_current_commit(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            result = subprocess.run(
                ['git', 'rev-parse', 'HEAD'],
                cwd=self.repo_path,
                capture_output=True,
                text=True
            )
            return result.stdout.strip() if result.returncode == 0 else None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return None
    
    def get_vless_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å vless –∫–ª—é—á–∞–º–∏"""
        vless_files = []
        for file_path in self.repo_path.glob("*.txt"):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'vless://' in content:
                        vless_files.append(file_path)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return vless_files
    
    def extract_vless_urls(self, file_path: Path) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å vless URL –∏–∑ —Ñ–∞–π–ª–∞"""
        urls = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º –≤—Å–µ vless URL –≤ —Ñ–∞–π–ª–µ
            vless_pattern = r'vless://[^\s\n]+'
            matches = re.findall(vless_pattern, content)
            urls.extend(matches)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return urls
    
    def parse_vless_url(self, vless_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç vless URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if '#' in vless_url:
                vless_url = vless_url.split('#')[0]
            
            # –ü–∞—Ä—Å–∏–º URL
            parsed = urlparse(vless_url)
            
            if parsed.scheme != 'vless':
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID
            uuid = parsed.username
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç
            hostname = parsed.hostname
            port = parsed.port or 443
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = parse_qs(parsed.query)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            security = params.get('security', ['tls'])[0]
            encryption = params.get('encryption', ['none'])[0]
            flow = params.get('flow', [''])[0]
            type_param = params.get('type', ['tcp'])[0]
            fp = params.get('fp', [''])[0]
            pbk = params.get('pbk', [''])[0]
            sni = params.get('sni', [''])[0]
            sid = params.get('sid', [''])[0]
            
            return {
                'uuid': uuid,
                'address': hostname,
                'port': port,
                'security': security,
                'encryption': encryption,
                'flow': flow,
                'type': type_param,
                'fp': fp,
                'pbk': pbk,
                'sni': sni,
                'sid': sid
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {vless_url}: {e}")
            return None
    
    def create_vless_outbound(self, vless_config: Dict, tag: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç outbound –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è vless"""
        if vless_config['security'] == 'reality':
            # Reality –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            outbound = {
                "tag": tag,
                "protocol": "vless",
                "settings": {
                    "vnext": [{
                        "address": vless_config['address'],
                        "port": vless_config['port'],
                        "users": [{
                            "id": vless_config['uuid'],
                            "flow": vless_config['flow']
                        }]
                    }]
                },
                "streamSettings": {
                    "network": vless_config['type'],
                    "security": "reality",
                    "realitySettings": {
                        "show": False,
                        "dest": f"{vless_config['sni']}:443" if vless_config['sni'] else "www.microsoft.com:443",
                        "xver": 0,
                        "serverName": vless_config['sni'] if vless_config['sni'] else "www.microsoft.com",
                        "publicKey": vless_config['pbk'],
                        "shortId": vless_config['sid'] if vless_config['sid'] else "",
                        "spiderX": "/"
                    }
                }
            }
        else:
            # –û–±—ã—á–Ω—ã–µ TLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            outbound = {
                "tag": tag,
                "protocol": "vless",
                "settings": {
                    "vnext": [{
                        "address": vless_config['address'],
                        "port": vless_config['port'],
                        "users": [{
                            "id": vless_config['uuid'],
                            "flow": vless_config['flow']
                        }]
                    }]
                },
                "streamSettings": {
                    "network": vless_config['type'],
                    "security": vless_config['security'],
                    "tlsSettings": {
                        "serverName": vless_config['sni'] if vless_config['sni'] else vless_config['address'],
                        "allowInsecure": False
                    }
                }
            }
        
        return outbound
    
    def get_all_active_keys(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ vless –∫–ª—é—á–∏ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        active_urls = []
        vless_files = self.get_vless_files()
        
        for file_path in vless_files:
            urls = self.extract_vless_urls(file_path)
            active_urls.extend(urls)
            print(f"üìÅ –§–∞–π–ª {file_path.name}: –Ω–∞–π–¥–µ–Ω–æ {len(urls)} –∫–ª—é—á–µ–π")
        
        return active_urls
    
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é vless –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def save_config(self, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é vless –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def update_config_with_keys(self, vless_urls: List[str]):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
        config = self.load_config()
        
        if not config:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ outbounds –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        new_outbounds = []
        
        for i, url in enumerate(vless_urls):
            vless_config = self.parse_vless_url(url)
            if vless_config:
                tag = f"vless-{i+1}"
                outbound = self.create_vless_outbound(vless_config, tag)
                new_outbounds.append(outbound)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á {i+1}: {vless_config['address']}:{vless_config['port']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—é—á–∞ {i+1}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π, –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ
        if not vless_urls:
            new_outbounds = [{
                "tag": "direct",
                "protocol": "freedom",
                "settings": {}
            }]
            print("‚ùå –í—Å–µ vless –∫–ª—é—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º direct outbound –≤ –∫–æ–Ω–µ—Ü
            new_outbounds.append({
                "tag": "direct",
                "protocol": "freedom",
                "settings": {}
            })
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(vless_urls)} vless –∫–ª—é—á–µ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config["outbounds"] = new_outbounds
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.save_config(config)
    
    def check_and_update(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        current_commit = self.get_current_commit()
        
        if not current_commit:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç")
            return
        
        if current_commit != self.last_commit:
            print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {current_commit[:8]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
            active_urls = self.get_all_active_keys()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.update_config_with_keys(active_urls)
            
            self.last_commit = current_commit
            self.active_keys = set(active_urls)
            
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(active_urls)}")
        else:
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def start_monitoring(self, interval: int = 30):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {self.repo_path}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} —Å–µ–∫—É–Ω–¥")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("-" * 50)
        
        try:
            while True:
                self.check_and_update()
                print("-" * 50)
                time.sleep(interval)
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    # –ü—É—Ç–∏ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    repo_path = "/Users/ghost/Documents/VCODE/–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò/PODPISKI"
    config_path = "/Users/ghost/Documents/VCODE/SERVER_VLESS/client-config.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
    if not Path(repo_path).exists():
        print(f"‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {repo_path}")
        return
    
    if not Path(config_path).exists():
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = VlessMonitor(repo_path, config_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.start_monitoring(interval=30)

if __name__ == "__main__":
    main()
