#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä vless URL –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import json
import re
from urllib.parse import urlparse, parse_qs
from typing import Dict, List, Optional

def parse_vless_url(vless_url: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç vless URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if '#' in vless_url:
            vless_url = vless_url.split('#')[0]
        
        # –ü–∞—Ä—Å–∏–º URL
        parsed = urlparse(vless_url)
        
        if parsed.scheme != 'vless':
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID
        uuid = parsed.username
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç
        hostname = parsed.hostname
        port = parsed.port or 443
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = parse_qs(parsed.query)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        security = params.get('security', ['tls'])[0]
        encryption = params.get('encryption', ['none'])[0]
        flow = params.get('flow', [''])[0]
        type_param = params.get('type', ['tcp'])[0]
        fp = params.get('fp', [''])[0]
        pbk = params.get('pbk', [''])[0]
        sni = params.get('sni', [''])[0]
        sid = params.get('sid', [''])[0]
        
        return {
            'uuid': uuid,
            'address': hostname,
            'port': port,
            'security': security,
            'encryption': encryption,
            'flow': flow,
            'type': type_param,
            'fp': fp,
            'pbk': pbk,
            'sni': sni,
            'sid': sid
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {vless_url}: {e}")
        return None

def create_vless_outbound(vless_config: Dict, tag: str) -> Dict:
    """
    –°–æ–∑–¥–∞–µ—Ç outbound –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è vless
    """
    if vless_config['security'] == 'reality':
        # Reality –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        outbound = {
            "tag": tag,
            "protocol": "vless",
            "settings": {
                "vnext": [{
                    "address": vless_config['address'],
                    "port": vless_config['port'],
                    "users": [{
                        "id": vless_config['uuid'],
                        "flow": vless_config['flow']
                    }]
                }]
            },
            "streamSettings": {
                "network": vless_config['type'],
                "security": "reality",
                "realitySettings": {
                    "show": False,
                    "dest": f"{vless_config['sni']}:443" if vless_config['sni'] else "www.microsoft.com:443",
                    "xver": 0,
                    "serverName": vless_config['sni'] if vless_config['sni'] else "www.microsoft.com",
                    "publicKey": vless_config['pbk'],
                    "shortId": vless_config['sid'] if vless_config['sid'] else "",
                    "spiderX": "/"
                }
            }
        }
    else:
        # –û–±—ã—á–Ω—ã–µ TLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        outbound = {
            "tag": tag,
            "protocol": "vless",
            "settings": {
                "vnext": [{
                    "address": vless_config['address'],
                    "port": vless_config['port'],
                    "users": [{
                        "id": vless_config['uuid'],
                        "flow": vless_config['flow']
                    }]
                }]
            },
            "streamSettings": {
                "network": vless_config['type'],
                "security": vless_config['security'],
                "tlsSettings": {
                    "serverName": vless_config['sni'] if vless_config['sni'] else vless_config['address'],
                    "allowInsecure": False
                }
            }
        }
    
    return outbound

def update_vless_config(config_path: str, vless_urls: List[str]):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é vless –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ URL
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ outbounds
        new_outbounds = []
        
        for i, url in enumerate(vless_urls):
            vless_config = parse_vless_url(url)
            if vless_config:
                tag = f"vless-{i+1}"
                outbound = create_vless_outbound(vless_config, tag)
                new_outbounds.append(outbound)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á {i+1}: {vless_config['address']}:{vless_config['port']}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π, –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ
        if not vless_urls:
            new_outbounds = [{
                "tag": "direct",
                "protocol": "freedom",
                "settings": {}
            }]
            print("‚ùå –í—Å–µ vless –∫–ª—é—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º direct outbound –≤ –∫–æ–Ω–µ—Ü
            new_outbounds.append({
                "tag": "direct",
                "protocol": "freedom",
                "settings": {}
            })
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(vless_urls)} vless –∫–ª—é—á–µ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config["outbounds"] = new_outbounds
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def main():
    # –¢–µ—Å—Ç–æ–≤—ã–µ vless URL –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    test_urls = [
        "vless://b41a734c-e6d1-48c5-8677-c52ba40ec454@145.249.115.53:443?security=reality&encryption=none&flow=xtls-rprx-vision&type=tcp&fp=random&pbk=FscaEWx0paNBzL7GWHj4Fll7Xc-KxdhKgTthBAnByWI&sni=pingless.com#–ê–º—Å—Ç–µ—Ä–¥–∞–º (–°–ö–û–†–û–°–¢–ù–ê–Ø –°–ï–¢–¨ –¥–ª—è WI-FI)",
        "vless://f1d0fff5-2a46-4d13-bf47-0c1b431363a0@lte.snowfallproject.site:443?security=reality&encryption=none&flow=xtls-rprx-vision&type=tcp&fp=chrome&pbk=dhTXgiFZvZPJSNc33EqNvn_CRor_RKeiMxSkHsEdDic&sni=m.vk.com&sid=418ed2065470c8fa#–ú–æ–±. –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã #5"
    ]
    
    config_path = "/Users/ghost/Documents/VCODE/SERVER_VLESS/client-config.json"
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ vless URL...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    for i, url in enumerate(test_urls):
        print(f"\nüìã –¢–µ—Å—Ç {i+1}:")
        config = parse_vless_url(url)
        if config:
            print(f"UUID: {config['uuid']}")
            print(f"–ê–¥—Ä–µ—Å: {config['address']}:{config['port']}")
            print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {config['security']}")
            print(f"SNI: {config['sni']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    # update_vless_config(config_path, test_urls)

if __name__ == "__main__":
    main()
